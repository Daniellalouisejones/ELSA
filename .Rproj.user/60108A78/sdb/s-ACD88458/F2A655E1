{
    "collab_server" : "",
    "contents" : "# knitr::stitch_rmd(script=\"./___/___.R\", output=\"./___/___/___.md\")\n#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!\nrm(list=ls(all=TRUE))  #Clear the variables from previous runs.\ncat(\"\\f\") # clear console\n\n# ---- load-packages -----------------------------------------------------------\n# Attach these packages so their functions don't need to be qualified: http://r-pkgs.had.co.nz/namespace.html#search-path\nlibrary(magrittr) # enables piping : %>%\n\n# ---- load-sources ------------------------------------------------------------\n# Call `base::source()` on any repo file that defines functions needed below.  Ideally, no real operations are performed.\nsource(\"./scripts/common-functions.R\") # used in multiple reports\n# source(\"./scripts/graph-presets.R\") # fonts, colors, themes\n\n# Verify these packages are available on the machine, but their functions need to be qualified: http://r-pkgs.had.co.nz/namespace.html#search-path\nrequireNamespace(\"ggplot2\") # graphing\n# requireNamespace(\"readr\") # data input\nrequireNamespace(\"tidyr\") # data manipulation\nrequireNamespace(\"dplyr\") # Avoid attaching dplyr, b/c its function names conflict with a lot of packages (esp base, stats, and plyr).\nrequireNamespace(\"testit\")# For asserting conditions meet expected patterns.\n# requireNamespace(\"car\") # For it's `recode()` function.\n\n# ---- declare-globals ---------------------------------------------------------\nfilePath <- \"./data/unshared/raw/ELSA_Portland_New_nomiss_years_variablenames.dat\"\nvariable_names <- c(\"idauniq\", \"wave\", \"dimar\", \"hedia01\", \"hedia02\", \"hedia03\", \"hedia04\", \"hedia05\", \"hedia06\", \"hedia07\", \"hedia08\", \"hedia09\", \"hedia10\", \"heage\", \"hedib01\", \"hedib02\", \"hedib03\", \"hedib04\", \"hedib05\", \"hedib06\", \"hedib07\", \"hedib08\", \"hedib09\", \"hedib10\", \"hesmk\", \"heala\", \"heacta\", \"heactb\", \"heactc\", \"mmwlka\", \"mmwlkb\", \"cflisen\", \"cfani\", \"cfmem\", \"cfpascr\", \"cflisd\", \"cfmscr\", \"cfpbscr\", \"cfptscr\", \"cfwhz1\", \"cfwhz2\", \"cfwhz3\", \"cfwhz4\", \"psceda\", \"pscedb\", \"pscedc\", \"pscedd\", \"pscede\", \"pscedf\", \"pscedg\", \"pscedh\", \"edqual\", \"scfamm\", \"scsca\", \"scscc\", \"intdatm\", \"intdaty\", \"iintdtm\", \"iintdty\", \"indobyr\", \"indager\", \"aethnicr\", \"heagcr\", \"heagcry\", \"hedbwlu\", \"hedbwas\", \"hedbwar\", \"hedbwos\", \"hedbwca\", \"hedbwpd\", \"hedbwps\", \"hedbwad\", \"hedbwde\", \"herosmd\", \"hemobcs\", \"hehsm86\", \"hehsm96\", \"hedcc\", \"heaidcr\", \"iintdatm\", \"iintdaty\", \"chesmk\", \"cfmersp\", \"cfprmem\", \"cfspeed\", \"cfanig\", \"cfexind\", \"cfaccur\", \"cfrecal\", \"hedimbp\", \"hediman\", \"hedimmi\", \"hedimhf\", \"hedimhm\", \"hedimar\", \"hedimdi\", \"hedbts\", \"hedimst\", \"hedimch\", \"hediblu\", \"hedibas\", \"hedibar\", \"hedibos\", \"hedibca\", \"hedibpd\", \"hedibps\", \"hedibad\", \"hedibde\", \"cfmeind\", \"cfind\", \"hedizm51\", \"hedizm52\", \"hediagbp\", \"hediagan\", \"hediagmi\", \"hediaghf\", \"hediaghm\", \"hediagar\", \"hediagdh\", \"hediagdi\", \"hediagst\", \"hediaghc\", \"hebdialu\", \"hebdiaas\", \"hebdiaar\", \"hebdiaos\", \"hebdiaca\", \"hebdiapd\", \"hebdiaps\", \"hebdiaad\", \"hebdiade\", \"hepdiagl\", \"hepdiadi\", \"hepdiamd\", \"hepdiaca\", \"cvd7dibt\", \"sex\", \"sysval\", \"diaval\", \"pulval\", \"mapval\", \"mmgsd1\", \"mmgsn1\", \"mmgsd2\", \"mmgsn2\", \"mmgsd3\", \"mmgsn3\", \"chol\", \"trig\", \"fglu\", \"htval\", \"wtval\", \"bmival\", \"bmiobe\", \"fvc1\", \"fev1\", \"pf1\", \"fvc2\", \"fev2\", \"pf2\", \"fvc3\", \"fev3\", \"pf3\", \"htfvc\", \"htfev\", \"htpf\", \"mmssre\", \"mmssti\", \"mmssna\", \"mmstre\", \"mmstti\", \"mmftre2\", \"mmftti\", \"mmlore\", \"mmloti\", \"mmlsre\", \"mmlsti\", \"mmcrre\", \"mmrrre\", \"mmrrfti\", \"mmrrtti\", \"mmrroc\", \"vitd\", \"mmftre\", \"prfvc\", \"pcfvc\", \"prfev\", \"pcfev\", \"htpef\", \"prpef\", \"pcpef\", \"bagey\", \"years\", \"diab\", \"cardio\", \"walkspee\")\nlength(variable_names)\n# ---- load-data ---------------------------------------------------------------\n# load the product of 0-ellis-island.R,  a list object containing data and metadata\n# ds <- read.table(filePath, col.names = variable_names)\nds <- read.delim(filePath, header=TRUE, stringsAsFactors = FALSE)\n\nnames(ds) <- variable_names\n# names(ds)[1:20]\n\n# Maheeha, please see how meta-data objects are used in\n# https://github.com/IALSA/ialsa-2016-groningen/blob/master/manipulation/0-ellis-island.R\n# https://github.com/IALSA/ialsa-2016-amsterdam/blob/master/manipulation/map/0-ellis-island-map.R\n\n# ---- collect-meta-data -----------------------------------------\n# prepare metadata to be added to the dto\n# we begin by extracting the names and (hopefuly their) labels of variables from each dataset\n# and combine them in a single rectanguar object, long/stacked with respect to study names\nsave_csv <- names_labels(ds)\nwrite.csv(save_csv,\"./data/meta/names-labels-live.csv\",row.names = T)\n\n# ---- inspect-data -------------------------------------------------------------\nnames(ds)\ntable(ds$smoke)\nds %>%\n  dplyr::group_by(wave) %>%\n  dplyr::select(pcfev) %>%\ndplyr::filter(!pcfev %in% c(-99999, -1)) %>%\ndplyr::summarize(mean_smoke = mean(pcfev),\n                 sd_smoke=  sd(pcfev),\n                 count = n())\n\n#### get temporal pattern of repsonse for a single subject for a particular variable\nset.seed(7)\nds_long <- ds\n(ids <- sample(unique(ds_long$idauniq),1))\nd <-ds_long %>%\n  dplyr::filter(idauniq %in% ids ) %>%\n  dplyr::select_(\"idauniq\",\"wave\", \"dimar\")\nd\n\n\n\n# ---- tweak-data --------------------------------------------------------------\n\n# ---- basic-table --------------------------------------------------------------\n\n# ---- basic-graph --------------------------------------------------------------\n\n\n# ---- wide-to-long-for-time -------------------------------\n(time_invariant <- c(\"idauniq\", \"gender\")) #make sure values in csv are correct!\n(time_variant <- setdiff(names(ds), time_invariant))\n\n#  melt with respect to the index type\nds_long <- data.table::melt(data =ds, id.vars = time_invariant,  measure.vars = time_variant)\ntable(ds_long$variable)\n\n\n\n\n\n# ---- reproduce ---------------------------------------\nrmarkdown::render(input = \"./sandbox/report-a.Rmd\" ,\n                  output_format=\"html_document\", clean=TRUE)\n",
    "created" : 1462719522169.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3306938334",
    "id" : "F2A655E1",
    "lastKnownWriteTime" : 1462719570,
    "last_content_update" : 1462719570543,
    "path" : "~/GitHub/ELSA/manipulation/0-ellis-island.R",
    "project_path" : "manipulation/0-ellis-island.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}